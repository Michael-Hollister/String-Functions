<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- 
********************************************************************
* Copyright (c) 2012, Michael Hollister                            *
*                                                                  *
* This source code is subject to the terms of The MIT License.     *
* If a copy of The MIT License was not distributed with this file, *
* you can obtain one at http://opensource.org/licenses/MIT.        *
********************************************************************
-->

<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>String Functions Documentation</title>
    </head>
    
    <body background="..\..\gfx\dbpro_bg.jpg">
        <!-- Page Header -->
        <center><table width="340" border="0" cellpadding="0" cellspacing="0">
        <tr>
	        <td><img src="..\..\gfx\dbph_head_1.jpg" width="102" height="51"></td>
	        <td><a href="..\..\main.htm"><img src="..\..\gfx\dbph_head_2.jpg" width="47" height="51" border="0"></a></td>
	        <td><a href="..\..\commands.htm"><img src="..\..\gfx\dbph_head_3.jpg" width="50" height="51" border="0"></a></td>
	        <td><a href="..\..\examples.htm"><img src="..\..\gfx\dbph_head_4.jpg" width="47" height="51" border="0"></a></td>
	        <td><a href="..\..\documents.htm"><img src="..\..\gfx\dbph_head_5.jpg" width="46" height="51" border="0"></a></td>
	        <td><a href="..\..\index.htm"><img src="..\..\gfx\dbph_head_6.jpg" width="56" height="51" border="0"></a></td>
        </tr>
        </table></center>
        <font face="Verdana">

        <!-- Function Head -->
        <font face="Verdana" size="5">
        <b>
        SF SplitStrToArray
        </b>
        <font face="Verdana" size="2">
        <p>
        This fills the array of words that are split from the source string.  The words are separated by the specified delimiter string.
        </p>
        </font>


        <!-- Synopsis -->
        <table width="590" cellpadding="3">
        <tr><td bgcolor="#0d4283"><font color="#ffffff" size="3"><b>&nbsp;
        Syntax
        </b></font></td></tr>
        </table>
        <font face="Verdana" size="2">
        <pre>
SF SplitStrToArray( <i>Arr</i> As Array, <i>Str</i> As String, <i>Delimiter</i> As String )<br />
SF SplitStrToArray( <i>Arr</i> As Array, <i>Str</i> As String, <i>Delimiter</i> As String, <i>Mode</i> As Boolean )
        </pre>
        </font>

        <!-- Parameters -->
        <table width="590" cellpadding="3">
        <tr><td bgcolor="#0d4283"><font color="#ffffff" size="3"><b>&nbsp;
        Parameters
        </b></font></td></tr>
        </table>
        <font face="Verdana" size="2">
        <pre>
<i>Arr</i>
        </pre>
        <blockquote>
The array to fill.
        </blockquote>
        <pre>
<i>Str</i>
        </pre>
        <blockquote>
Source string.
        </blockquote>
        <pre>
<i>Delimiter</i>
        </pre>
        <blockquote>
The token string that will separate the words.
        </blockquote>
        <pre>
<i>Mode</i>
        </pre>
        <blockquote>
If the value is 1, this will remove empty strings from the array.  Otherwise, it will return the empty elements.
        </blockquote>
        </font>
        <br />


        <!-- Returns -->
        <table width="590" cellpadding="3">
        <tr><td bgcolor="#0d4283"><font color="#ffffff" size="3"><b>&nbsp;
        Returns
        </b></font></td></tr>
        </table>
        <font face="Verdana" size="2">
        <p>
        This command does not return a value.<br />
        </p>
        </font>

        <!-- Exception Table -->
        <table width="590" cellpadding="3">
        <tr><td bgcolor="#0d4283"><font color="#ffffff" size="3"><b>&nbsp;
        Exceptions
        </b></font></td></tr>
        </table>
        <font face="Verdana" size="2">
        <p>
        <table width="590" border="1" cellpadding="3" cellspacing="3">
            <thead>
                <tr>
                    <td><b>Code</b></td>
                    <td><b>Exception</b></td>
                    <td><b>Condition</b></td>
                </tr>
            </thead>
        

        <!-- ArrayNotString -->
        <tr>
            <td>204</td>
            <td>ArrayNotString<br /></td>
            <td><i>Arr</i> is not a string array.</td>
        </tr>
        </table>

        </p>
        </font>


        <!-- Description -->
        <table width="590" cellpadding="3">
        <tr><td bgcolor="#0d4283"><font color="#ffffff" size="3"><b>&nbsp;
        Description
        </b></font></td></tr>
        </table>
        <font face="Verdana" size="2">
        <p>
        This fills the array of words that are split from the source string. The delimiter string is the token used to separate the string into words.<br />
        <br />
        If the array size is larger than the amount of words returned, then the rest of the array indexes are set to null strings.  If the array size is less than the amount of words returned, it will only hold the amount of strings that can be contained in the array size.
        </p>
        </font>


        <!-- Examples -->
        <table width="590" cellpadding="3">
        <tr><td bgcolor="#0d4283"><font color="#ffffff" size="3"><b>&nbsp;
        Example Code
        </b></font></td></tr>
        </table>
        <font face="Verdana" size="3">
        <pre>
Items$ = "Wood Tools: 2,Stone Tools: 8,Iron Tools: 5"
Parameters$ = "1,5,10,91,61,86,92,115,224,71"
Data$ = "0.32,92,,0.311,3.14,,987,0.93,0.0001," // Declare a string with some missing entries.


Rem Or you can use String Count() command from Matrix1 Utility Plug-ins.
Dim Items(5) As String
Dim FunctionParams(String_Count(Parameters$,",")) As String // Resize the array to the amount of delimiters.
Dim DataArr(10) As String

SF SplitStrToArray Items(),Items$,","
SF SplitStrToArray FunctionParams(),Parameters$,","
SF SplitStrToArray DataArr(),Data$,",",1 // Remove the null elements.

Rem Print out the arrays.
Print "Items:"
For X = 0 To Array Count(Items())
    Print "Item" + Str$(X) + ":" + Items(X)
Next X
Print

Print "Parameters:"
For X = 0 To Array Count(FunctionParams())
    Print "Param" + Str$(X) + ":" + FunctionParams(X)
Next X
Print

Print "Data:"
For X = 0 To Array Count(DataArr())
    Print "Data" + Str$(X) + ":" + DataArr(X)
Next X

Wait Key
End

Function String_Count( Source As String, Search As String )
    Count = 0
    
    Do
        SubStrIndex = Find Sub String$(Source,Search)
        
        Rem 'Find Sub String$' does not return -1 if it can't find the sub string, so it will be checked by the below expression. 
        If SubStrIndex < 1 Or SubStrIndex > Len(Source)
            ExitFunction Count
        Else
           Rem Truncate the substring past the returned index.
           Source = Right$(Source,Len(Source) - SubStrIndex)
           
           Inc Count
        EndIf
    Loop
EndFunction Count
        </pre>
        </font>


        <!-- See Also -->
        <table width="590" cellpadding="3">
        <tr><td bgcolor="#0d4283"><font color="#ffffff" size="3"><b>&nbsp;
        See also
        </b></font></td></tr>
        </table>
        <font face="Verdana" size="2">
        <p>
        <a href="..\String%20Functions%20Index.htm">String Functions Index</a><br />
        <a href="..\..\main.htm">Main Menu</a><br />
        </p>
        </font>
        <br />

        </font>

        <br />
        <!-- Page Footer -->
        <table width="100%" border="0" cellpadding="0" cellspacing="0">
        <tr>
	        <td align="center"><img src="..\..\gfx\dbph_foot_1.jpg" width="340" height="38"></td>
        </tr>
        </table>
    </body>
</html>
